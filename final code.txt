module space(clk50, clk1, upButton, downButton, leftButton, rightButton, col24, row16, reset);
input clk50, clk1, upButton, downButton, leftButton, rightButton, reset;
output reg [23:0]col24;
output reg [15:0]row16;
wire firstScreen,  gameStart;
assign firstScreen = ~reset|(counter321<=3);  ///>=
assign gameStart = (~firstScreen)&&(~gameOver);

reg [4:0] i,j;
reg bulletFired, gameOver, clk10;
reg [4:0] bulletX;
reg [3:0] bulletY, shipY, counter321;
reg [2:0] shipHealth;//shipX needed = no
reg invaderActive[0:4];
reg [4:0]invaderX4;
reg [3:0]invaderY4;
reg [4:0]invaderX3;
reg [3:0]invaderY3;
reg [4:0]invaderX2;
reg [3:0]invaderY2;
reg [4:0]invaderX1;
reg [3:0]invaderY1;
reg [4:0]invaderX0;
reg [3:0]invaderY0;
reg [4:0]invaderX[0:4];
reg [3:0]invaderY[0:4];
reg [3:0]score;
reg [2:0] invaderHealth[0:4];
reg [3:0] randcounter;
reg [3:0] randomY [0:15];
parameter maxHealth = 3;

always@(*)begin
	invaderX4=invaderX[4];
	invaderX3=invaderX[3];
	invaderX2=invaderX[2];
	invaderX1=invaderX[1];
	invaderX0=invaderX[0];
	invaderX4=invaderX[4];
	invaderX3=invaderX[3];
	invaderX2=invaderX[2];
	invaderX1=invaderX[1];
	invaderX0=invaderX[0];
end

initial begin
//Ashish! Initialize other things too.
i=5'd0;
j=5'd0;
gameOver=1'b0;
bulletFired=1'b0;
clk10=1'b0;
shipHealth=3'd5;
shipY=4'd8;

invaderActive[0]=1'b0;
invaderActive[1]=1'b0;
invaderActive[2]=1'b0;
invaderActive[3]=1'b0;
invaderActive[4]=1'b1;
score=4'b0;
invaderX4=5'd19;
invaderY4=4'd12;
invaderX[4]=5'd19;
invaderY[4]=4'd12;
invaderHealth[0]=3'd0;
invaderHealth[1]=3'd1;
invaderHealth[2]=3'd2;
invaderHealth[3]=3'd3;
invaderHealth[4]=3'd3;

randcounter=4'b0;
counter321=4'b0;
bulletX=5'd8;
bulletY=4'd8;

randomY[0]=4'd11;
randomY[1]=4'd2;
randomY[2]=4'd4;
randomY[3]=4'd5;
randomY[4]=4'd1;
randomY[5]=4'd7;
randomY[6]=4'd3;
randomY[7]=4'd8;
randomY[8]=4'd9;
randomY[9]=4'd12;
randomY[10]=4'd10;
randomY[11]=4'd13;
randomY[12]=4'd6;
randomY[13]=4'd14;
randomY[14]=4'd4;
randomY[15]=4'd9;
end

always @(posedge clk1)begin
	
	if (gameStart) begin
	//check for ship health
		if (shipHealth==3'd0)gameOver=1'b1;
	   else begin
			for (i=3'd0; i<=3'd4; i=i+1) begin
				//Below is the crash condition
				if ((bulletX==invaderX[i]+1)&&((bulletY<=invaderY[i]+1)&&(bulletY>=invaderY[i]-1)))
				begin
					invaderActive[i]=1'b0;
					score=score+1;
				end
			end
		
		//ship invader crash
		for (j=5'd0; j<=4; j=j+1) begin
		//ship invader crash condition
			if ((invaderHealth[j]>3'b0)&&invaderActive[j])begin   //Greater than 1'b0? Is that correct?
				if(((invaderX[j]==4'd4)&(invaderY[j]==shipY))|((invaderX[j]==3)&((invaderY[j]==shipY+1)|(invaderY[j]=shipY-1)))|((invaderX[j]==2)&((invaderY[j]==shipY+2)|(invaderY[j]=shipY-2))))
				begin
					shipHealth=shipHealth-1;
					score = score -1;
					invaderActive[j]=1'b0;
				end
				else if (invaderX[j]==5'd2) invaderActive[j]=1'b0;//invader passes by, without crashing.
			end
		end
		
		// change positions
		
		for (j=5'd0; j<=5'd4; j=j+1)if(invaderActive[j])invaderX[j]=invaderX[j]-1;
		
		// create positions
		//invader
		for(i=0;i<5'd5;i=i+1)begin
			if(~invaderActive[i])begin
			if(invaderHealth[i]==maxHealth)begin
					invaderActive[i]=1'b1;
				   invaderX[i]=5'd23;
					invaderY[i]=randomY[randcounter];
				end
			else invaderHealth[i]=invaderHealth[i]+1;
			end
		end
	  end
	end
end

reg clkb;
reg [23:0]counterb;
always @(posedge clk50)begin
	counterb=counterb+1;
	if(counterb==24'd5000000)begin
		counterb=24'b0;
		clkb=~clkb;
	end
end
integer v;
always @(posedge clkb)begin
		if(~bulletFired)begin
			if(~rightButton)begin
				bulletX=5'd3;
				bulletFired=1'b1;
				bulletY=shipY;
			end
		end
		if (bulletX==5'd23)bulletFired=1'b0;//bullet passes by, withouth crashing.
		for(v=0;v<4;v=v+1)if ((bulletX==invaderX[v]+1)&&((bulletY<=invaderY[v]+1)|(bulletY>=invaderY[v]-1)))bulletFired=1'b0;//crashed=1;
		if (bulletFired)bulletX=bulletX+1;
		if(~upButton)shipY=shipY-1;
		if(~downButton)shipY=shipY+1;
		randcounter=randcounter+1;
		if(randcounter==4'b1111)randcounter=4'b0;
end

always @(posedge clk1)if(counter321<5)counter321=counter321+1;

reg pi[0:4];
reg ps;
reg pb;
reg [15:0]p;
reg pss;
reg [4:0]counterx;
reg [3:0]countery;

reg [9:0]cled;
reg clkled;
initial begin
	cled =10'b0;
	clkled = 0;
	counterx = 5'b0;
	countery = 4'b0;
end

always @(posedge clk50)begin
	if (cled>10'd999)begin 
		clkled=~clkled;
		cled = 10'b0;
	end
	cled=cled+1;
end


always @(posedge clkled)begin
	col24=24'b111111111111111111111111;
	col24[counterx]=0;
	row16=p;
	counterx=counterx+1;
	if(counterx>23)counterx=5'd0;
end

always @(posedge clk50)begin
p[countery] = pb|ps|pi[4]|pi[3]|pi[2]|pi[1]|pi[0]|pss;
pss=((counter321>=0)&&(counter321<1)&&(((counterx==5'd4)&&(countery>=2)&&(countery<=13))|((counterx==5'd6)&&(countery>=2)&&(countery<=13))|((counterx==5'd8)&&(countery>=2)&&(countery<=13))))|((counter321>=1)&&(counter321<2)&&(((counterx==5'd5)&&(countery>=2)&&(countery<=13))|((counterx==5'd7)&&(countery>=2)&&(countery<=13))))|((counter321>=2)&&(counter321<=3)&&(((counterx==5'd6)&&(countery>=2)&&(countery<=13))));
pb = gameStart&&bulletFired&&(counterx>=bulletX)&&(counterx<=bulletX+1)&&(countery==bulletY);
ps = gameStart&&((counterx==5'd2)&&(countery>=shipY-2)&&(countery<=shipY+2))|((counterx==5'd3)&&(countery>=shipY-1)&&(countery<=shipY+1))|((counterx==5'd4)&&(countery==shipY));
pi[4] = gameStart&&invaderActive[4]&&(((counterx>=invaderX4)&&(counterx<=invaderX4+1)&&(countery>=invaderY4-1)&&(countery<=invaderY4+1))|((counterx==invaderX4-1)&&(countery==invaderY4)));
pi[3] = gameStart&&invaderActive[3]&&(((counterx>=invaderX3)&&(counterx<=invaderX3+1)&&(countery>=invaderY3-1)&&(countery<=invaderY3+1))|((counterx==invaderX3-1)&&(countery==invaderY3)));
pi[2] = gameStart&&invaderActive[2]&&(((counterx>=invaderX2)&&(counterx<=invaderX2+1)&&(countery>=invaderY2-1)&&(countery<=invaderY2+1))|((counterx==invaderX2-1)&&(countery==invaderY2)));
pi[1] = gameStart&&invaderActive[1]&&(((counterx>=invaderX1)&&(counterx<=invaderX1+1)&&(countery>=invaderY1-1)&&(countery<=invaderY1+1))|((counterx==invaderX1-1)&&(countery==invaderY1)));
pi[0] = gameStart&&invaderActive[0]&&(((counterx>=invaderX0)&&(counterx<=invaderX0+1)&&(countery>=invaderY0-1)&&(countery<=invaderY0+1))|((counterx==invaderX0-1)&&(countery==invaderY0)));
countery=countery+1;
end

endmodule
